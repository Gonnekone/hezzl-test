// Code generated by MockGen. DO NOT EDIT.
// Source: create.go
//
// Generated by this command:
//
//	mockgen -source=create.go -destination=mocks/GoodSaver.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Gonnekone/hezzl-test/core/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockGoodSaver is a mock of GoodSaver interface.
type MockGoodSaver struct {
	ctrl     *gomock.Controller
	recorder *MockGoodSaverMockRecorder
	isgomock struct{}
}

// MockGoodSaverMockRecorder is the mock recorder for MockGoodSaver.
type MockGoodSaverMockRecorder struct {
	mock *MockGoodSaver
}

// NewMockGoodSaver creates a new mock instance.
func NewMockGoodSaver(ctrl *gomock.Controller) *MockGoodSaver {
	mock := &MockGoodSaver{ctrl: ctrl}
	mock.recorder = &MockGoodSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoodSaver) EXPECT() *MockGoodSaverMockRecorder {
	return m.recorder
}

// InvalidList mocks base method.
func (m *MockGoodSaver) InvalidList(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidList", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidList indicates an expected call of InvalidList.
func (mr *MockGoodSaverMockRecorder) InvalidList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidList", reflect.TypeOf((*MockGoodSaver)(nil).InvalidList), ctx)
}

// SaveGood mocks base method.
func (m *MockGoodSaver) SaveGood(ctx context.Context, name, projectID string) (*models.Good, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGood", ctx, name, projectID)
	ret0, _ := ret[0].(*models.Good)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveGood indicates an expected call of SaveGood.
func (mr *MockGoodSaverMockRecorder) SaveGood(ctx, name, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGood", reflect.TypeOf((*MockGoodSaver)(nil).SaveGood), ctx, name, projectID)
}
